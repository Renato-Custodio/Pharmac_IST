// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  password String

  refreshTokens String[]

  ownedPharmaciesIds String[]   @db.ObjectId
  ownedPharmacies    Pharmacy[]

  favoritePharmaciesIds String[]   @db.ObjectId
  favoritePharmacies    Pharmacy[] @relation(name: "FavoritePharmacies", fields: [favoritePharmaciesIds], references: [id])

  flaggedPharmaciesIds String[]   @db.ObjectId
  flaggedPharmacies    Pharmacy[] @relation(name: "FlaggedPharmacies", fields: [flaggedPharmaciesIds], references: [id])

  subscribedMedicinesIds String[]   @db.ObjectId
  subscribedMedicines    Medicine[] @relation(fields: [subscribedMedicinesIds], references: [id])
}

type GPSLocation {
  lat Float
  lng Float
}

model MapChunk {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  chunkId    String      @unique
  location   GPSLocation
  pharmacies Pharmacy[]
}

model Pharmacy {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  location     GPSLocation
  picture      String
  medicinesIDs String[]    @db.ObjectId
  medicines    Medicine[]  @relation(fields: [medicinesIDs], references: [id])
  rating       Json
  flagCount    Int
  stock        Stock[]

  accountId String?  @db.ObjectId
  account   Account? @relation(fields: [accountId], references: [id])

  favouritesIds String[]  @db.ObjectId
  favourites    Account[] @relation(name: "FavoritePharmacies", fields: [favouritesIds], references: [id])

  flaggedByIds String[]  @db.ObjectId
  flaggedBy    Account[] @relation(name: "FlaggedPharmacies", fields: [flaggedByIds], references: [id])

  mapChunk   MapChunk? @relation(fields: [mapChunkId], references: [id])
  mapChunkId String?   @db.ObjectId
}

model Stock {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  medicineId String    @db.ObjectId
  medicines  Medicine  @relation(fields: [medicineId], references: [id])
  quantity   Int
  pharmacy   Pharmacy? @relation(fields: [pharmacyId], references: [id])
  pharmacyId String?   @db.ObjectId

  @@unique([pharmacyId, medicineId])
}

model Medicine {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  purpose String
  picture String

  pharmaciesIDs String[]   @db.ObjectId
  pharmacies    Pharmacy[] @relation(fields: [pharmaciesIDs], references: [id])

  subscriberIDs String[]  @db.ObjectId
  subscriber    Account[] @relation(fields: [subscriberIDs], references: [id])
  stock         Stock[]
}
